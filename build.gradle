/*
 * Copyright 2020 Aiven Oy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.util.DistributionLocator
import org.gradle.util.GradleVersion

wrapper {
    distributionType = 'ALL'
    doLast {
        final DistributionLocator locator = new DistributionLocator()
        final GradleVersion version = GradleVersion.version(wrapper.gradleVersion)
        final URI distributionUri = locator.getDistributionFor(version, wrapper.distributionType.name().toLowerCase(Locale.ENGLISH))
        final URI sha256Uri = new URI(distributionUri.toString() + ".sha256")
        final String sha256Sum = new String(sha256Uri.toURL().bytes)
        wrapper.getPropertiesFile() << "distributionSha256Sum=${sha256Sum}\n"
        println "Added checksum to wrapper properties"
    }
}

allprojects {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    apply plugin: 'java'

    // https://docs.gradle.org/current/userguide/distribution_plugin.html
    apply plugin: 'distribution'

    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    apply plugin: 'checkstyle'

    // https://docs.gradle.org/current/userguide/publishing_maven.html
    apply plugin: "maven-publish"

    apply plugin: "idea"

    ext {
        slf4jVersion = "1.7.35"
        opensearchVersion = "1.3.17"
        // since jackson-core is in the main classpath
        // plz keep the same version as for OpenSearch
        jacksonDatabind = "2.14.2"
    }


    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    repositories {
        mavenCentral()
    }

    distributions {

        main {
            contents {
                from jar
                from configurations.runtimeClasspath

                from(sourceSets.main.output.resourcesDir) {
                    include "*.properties", "*.policy"
                }
                from(projectDir) {
                    include "README*", "LICENSE*", "NOTICE*"
                }

                into '/'
            }
        }
    }

    processResources {
        filesMatching('plugin-descriptor.properties') {
            expand(version: project.version,
                    javaVersion: java.sourceCompatibility,
                    opensearchVersion: opensearchVersion
            )
        }
    }


    sourceSets {
        integrationTest {
            java.srcDir file('src/integration-test/java')
            resources.srcDir file('src/integration-test/resources')
            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            runtimeClasspath += output + compileClasspath
        }
    }

    idea {
        module {
            testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
            testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
        }
    }

    checkstyle {
        toolVersion "8.44"
        configDirectory.set(rootProject.file("checkstyle/"))
    }

    test {
        useJUnitPlatform()
        minHeapSize = "1024m"
        maxHeapSize = "1024m"
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntime.extendsFrom testRuntime
    }

    dependencies {
        implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonDatabind") {
            exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        }

        compileOnly "org.opensearch:opensearch:$opensearchVersion"

        implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.17.1") {
            exclude group: "org.slf4j", module: "slf4j-api"
            exclude group: "org.apache.logging.log4j", module: "log4j-api"
            exclude group: "org.apache.logging.log4j", module: "log4j-core"
        }

        implementation "org.slf4j:slf4j-api:$slf4jVersion"

        testImplementation "org.mockito:mockito-core:4.3.0"
        testImplementation "org.mockito:mockito-junit-jupiter:4.3.0"
        testImplementation "org.opensearch:opensearch:$opensearchVersion"
        testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

        integrationTestImplementation sourceSets.test.output
    }

}
